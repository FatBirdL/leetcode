###Q:给定一个整数数组，判断是否存在重复元素。

如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。

示例 1:

输入: [1,2,3,1]
输出: true
示例 2:

输入: [1,2,3,4]
输出: false
###我的代码：（跑出结果是没问题的，但是超时了，时间复杂度好像高了。。。）
###垃圾代码展览：
###
class Solution(object):
    def containsDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        num = []
        for each in nums:
            if each not in num:
                num.append(each)
        if num == nums:
            return False
        else:
            return True
###占坑补算法时间和空间复杂的的东西。。。。。
###不超时的我最喜欢的哈希的算法，但是要先看哈希。。。占个坑再补哈希表的东西
#######################################################################################
###排序的算法，大概就是先把元组排序再比较相邻的两个是否相等
###代码：
def dup(nums):
  nums.sort()
  for i in range(len(nums)-1):
    if nus[i] == nums[i+1]:
      return True
  return False
###自己写排序遇到的几个坑。。。1/list.sort()后返回的是一个nonetype类型，而非列表，不能进行列表的操作。2/if后面就不要跟else了，不然有一个相邻的不想打就判断错误直接返回了
我的逻辑混乱问题这是。。。3/i的取值问题。。。
